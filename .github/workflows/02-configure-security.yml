name: "02 - secure VPS"

on:
  workflow_dispatch:
    inputs:
      vps_root_password:
        description: 'Password for root user, used to setup initial VPS configuration'
        required: true
    
env:
  ORGANISATION_NAME: sylvanld-vps

jobs:
  ssh-key:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      
      - name: Retrieve auth information for SSH access to VPS
        id: generate-key
        run: |
          mkdir -p ~/.ssh/
          echo -e "${{secrets.VPS_SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa_github
          echo -e "${{secrets.VPS_SSH_PUBLIC_KEY}}" > ~/.ssh/id_rsa_github.pub
          echo -e "${{secrets.VPS_SSH_FINGERPRINT}}" >> ~/.ssh/known_hosts
      
      - name: Install package that enable remote access over SSH with plain password (required at first time)
        if: success()
        run: sudo apt-get install -y sshpass
      
      - name: Copy SSH key on remote host
        if: success()
        run: sshpass -p ${{ github.event.inputs.vps_root_password }} scp ~/.ssh/id_rsa_github.pub root@${{secrets.VPS_HOST_OR_IP}}:id_rsa_github.pub
        
      - name: Install docker and create SSH action user with group docker
        if: success()
        run: sshpass -p ${{ github.event.inputs.vps_root_password }} ssh root@${{ secrets.VPS_HOST_OR_IP }} <<-EOF
          apt update && apt install -y docker.io
          useradd ${{ secrets.VPS_DEPLOY_USER }} -m -b /home -s /bin/bash -G docker
          mkdir -p /home/${{ secrets.VPS_DEPLOY_USER }}/.ssh
          cat id_rsa_github.pub >> /home/${{ secrets.VPS_DEPLOY_USER }}/.ssh/authorized_keys
          EOF
          
      - name: Disable ssh root access and password-based authentication
        if: success()
        run: sshpass -p ${{ github.event.inputs.vps_root_password }} ssh root@${{ secrets.VPS_HOST_OR_IP }} <<-EOF
          sed -i 's/\(\#\)\{0,1\}PermitRootLogin.*/PermitRootLogin no/g' /etc/ssh/sshd_config
          sed -i 's/\(\#\)\{0,1\}PasswordAuthentication.*/PasswordAuthentication no/g' /etc/ssh/sshd_config
          systemctl restart sshd
          EOF
          

      
